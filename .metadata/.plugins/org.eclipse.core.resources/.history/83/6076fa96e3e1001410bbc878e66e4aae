package com.hdfs;

import java.util.LinkedHashMap;

public class MapReduceTaskWithThreadPool {

	TaskTrackerConfiguration tTCnf;

	ThreadPool mapperPool;
	ThreadPool reducerPool;

	LinkedHashMap<Integer, MapperTaskDetail> mapRunningMapperIdToTaskInfo;
	LinkedHashMap<Integer, ReducerTaskDetail> mapRunningReducerIdToTaskInfo;

	public MapReduceTaskWithThreadPool(
			TaskTrackerConfiguration tTCnf,
			LinkedHashMap<Integer, MapperTaskDetail> mapRunningMapperIdToTaskInfo,
			LinkedHashMap<Integer, ReducerTaskDetail> mapRunningReducerIdToTaskInfo) {
		this.mapRunningMapperIdToTaskInfo = mapRunningMapperIdToTaskInfo;
		this.mapRunningReducerIdToTaskInfo = mapRunningReducerIdToTaskInfo;
		this.tTCnf = tTCnf;
	}

	public void submitMapTask(int taskId) {
		mapperPool.addTask(new MapTask());

	}

	public void submitReduceTask(int taskId) {
		reducerPool.addTask(new ReduceTask());
	}

	public void createMapperThreadPool(int threadCount) {
		ThreadPool mapperPool = new ThreadPool(threadCount);
		this.mapperPool = mapperPool;
	}

	public void createReducerThreadPool(int threadCount) {
		ThreadPool reducerPool = new ThreadPool(threadCount);
		this.reducerPool = reducerPool;
	}

	public void shutDownPool() {
		mapperPool.shutdown();
		reducerPool.shutdown();
	}

	private class MapTask implements Runnable {
		@Override
		public void run() {
			try {
				// System.out.println("Removing Element " + queue.take());
				// Thread.sleep(1000);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private class ReduceTask implements Runnable {
		@Override
		public void run() {
			try {
				performReduceTask();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

}