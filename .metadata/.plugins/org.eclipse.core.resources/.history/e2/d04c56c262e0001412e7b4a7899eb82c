package com.hdfs;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.rmi.Naming;
import java.rmi.registry.LocateRegistry;
import java.util.Timer;

public class DataNodeServerImpl {

	public static TaskTrackerConfiguration tTCnf;

	public static int initialiseVariables(String[] args) {
		int status = 0;
		String taskTrackerConfigFilePath;

		taskTrackerConfigFilePath = args[0];
		// dataNodeConfigFilePath =
		// "/home/apratim/workspace/HDFSCore/datanode/dataNodeConfig";

		File file = new File(taskTrackerConfigFilePath);
		if (file.exists()) {
			try {
				BufferedReader bufferedReader = new BufferedReader(
						new FileReader(file));

				String line;
				tTCnf = new TaskTrackerConfiguration();

				// tTCnf.dataNodePort = 5002;
				// tTCnf.dataNodeIP = "localhost";
				// tTCnf.dataNodeId = 1;
				// tTCnf.nameNodeIP = "localhost";
				// tTCnf.nameNodePort = 5001;
				// tTCnf.dataNodeBlocksDirectory =
				// "/home/apratim/workspace/HDFSCore/datanode/";
				// tTCnf.nameNodeReference = "Namenode";
				// tTCnf.dataNodeReference = "Datanode";

				// tTCnf.jobTrackerIp = "localhost";
				// tTCnf.jobTrackerPort = 6000;
				// tTCnf.jobTrackerReference = "JobTracker";

				// tTCnf.taskTrackerId = 1;

				tTCnf.totalMapSlots = 10;
				tTCnf.totalReduceSlots = 10;
				tTCnf.freeMapSlots = 10;
				tTCnf.freeReduceSlots = 10;

				line = bufferedReader.readLine();
				tTCnf.dataNodeReference = line.split("=")[1];

				line = bufferedReader.readLine();
				tTCnf.dataNodePort = Integer.parseInt(line.split("=")[1]);

				line = bufferedReader.readLine();
				tTCnf.dataNodeIP = line.split("=")[1];

				line = bufferedReader.readLine();
				tTCnf.dataNodeId = Integer.parseInt(line.split("=")[1]);

				line = bufferedReader.readLine();
				tTCnf.dataNodeBlocksDirectory = line.split("=")[1];

				line = bufferedReader.readLine();
				tTCnf.nameNodeIP = line.split("=")[1];

				line = bufferedReader.readLine();
				tTCnf.nameNodePort = Integer.parseInt(line.split("=")[1]);

				line = bufferedReader.readLine();
				tTCnf.nameNodeReference = line.split("=")[1];

				line = bufferedReader.readLine();
				tTCnf.schedulerDelay = Long.parseLong(line.split("=")[1]);

				line = bufferedReader.readLine();
				tTCnf.jobTrackerIp = line.split("=")[1];

				line = bufferedReader.readLine();
				tTCnf.jobTrackerPort = Integer.parseInt(line.split("=")[1]);

				line = bufferedReader.readLine();
				tTCnf.jobTrackerReference = line.split("=")[1];

				line = bufferedReader.readLine();
				tTCnf.taskTrackerId = Integer.parseInt(line.split("=")[1]);

				status = 1;
			} catch (Exception e) {

				e.printStackTrace();
			}
		}
		return status;
	}

	public static void main(String[] args) {
		try {
			int status = initialiseVariables(args);
			if (status == 0) {
				System.out
						.println("Datanode Could not launch, Error Reading Configuration File..");
			} else {

				System.out.println("Datanode starting...");

				IDataNode dataNodeStub = new DataNodeInterfaceImpl(tTCnf);

				LocateRegistry.createRegistry(tTCnf.dataNodePort);

				Naming.rebind("rmi://" + tTCnf.dataNodeIP + ":"
						+ tTCnf.dataNodePort + "/" + tTCnf.dataNodeReference,
						dataNodeStub);

				System.out.println("DataNode started");

				tTCnf.dataNodeInterfaceImpl = (DataNodeInterfaceImpl) dataNodeStub;

				System.out.println("Scheduler starting..");
				RepeatTask repeatTask = new RepeatTask(tTCnf);
				Timer timer = new Timer();
				timer.schedule(repeatTask, 0, tTCnf.schedulerDelay);
				System.out.println("Scheduler started..");
			}
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}
