import java.util.LinkedHashMap;
import java.util.concurrent.LinkedBlockingQueue;


public class MapReduceTaskWithThreadPool {
	// private static AtomicInteger rnd = new AtomicInteger(0);
	// private final BlockingQueue<Integer> queue;

	ThreadPool mapperPool;
	ThreadPool reducerPool;

	LinkedHashMap<Integer, MapperTaskDetail> mapRunningMapperIdToTaskInfo;

	public MapReduceTaskWithThreadPool() {
		queue = new LinkedBlockingQueue<>(3);
	}

	public void submitMapTask(int taskId) {
		mapperPool.addTask(new MapTask());

	}

	public void submitReduceTask(int taskId) {
		reducerPool.addTask(new ReduceTask());
	}

	public void init() {
		ThreadPool mapperPool = new ThreadPool(2);
		this.mapperPool = mapperPool;

		ThreadPool reducerPool = new ThreadPool(2);
		this.reducerPool = reducerPool;
		// pool.shutdown();
	}

	private class MapTask implements Runnable {
		@Override
		public void run() {
			Integer e = rnd.incrementAndGet();
			System.out.println("Inserting Element " + e);
			try {
				queue.put(e);
				Thread.sleep(1000);
			} catch (InterruptedException e2) {
				Thread.currentThread().interrupt();
			}
		}
	}

	private class ReduceTask implements Runnable {
		@Override
		public void run() {
			try {
				System.out.println("Removing Element " + queue.take());
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
			}
		}
	}
}