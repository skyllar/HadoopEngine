package com.hdfs;

import java.rmi.Naming;
import java.rmi.RemoteException;
import java.util.Timer;
import java.util.TimerTask;

import com.hdfs.MapReduce.JobStatusRequest;

public class RepeatTask extends TimerTask {

	Timer timer;
	IJobTracker jobTracker;
	ClientConfiguration clientConf;
	Integer jobId;

	public RepeatTask(Timer t, ClientConfiguration clientConfiguration,
			Integer jobId) {
		timer = t;
		clientConf = clientConfiguration;
	}

	@Override
	public void run() {
		// setJobTrackerStub();
		getJobStatus();
	}

	// private void setJobTrackerStub() {
	// try {
	// jobTracker = (IJobTracker) Naming.lookup("rmi://"
	// + clientConf.jobTrackerIp + ":" + clientConf.jobTrackerPort + "/"
	// + clientConf.jobTrackerReference);
	// } catch (Exception e) {
	// e.printStackTrace();
	// }
	// }

	private int getJobStatus() {
		int status = 0;
		JobStatusRequest.Builder jobStatusRequestBuilder = JobStatusRequest
				.newBuilder();
		jobStatusRequestBuilder.setJobId(jobId);
		try {
			clientConf.jobTrackerStub.getJobStatus(jobStatusRequestBuilder
					.build().toByteArray());
			int status;
			boolean jobDone;
			int totalMapTasks;
			int numMapTasksStarted;
			int totalReduceTasks;
			int numReduceTasksStarted;
		} catch (RemoteException e) {
			e.printStackTrace();
		}

		if (status == 0) {
			System.out.println("Task fails to complete.");
			timer.cancel();
		} else if (status == 1) {
			System.out.println("Task Completed.");
			timer.cancel();
		} else {
			System.out.println("Task still going on..");
		}
		return 0;
	}
}
