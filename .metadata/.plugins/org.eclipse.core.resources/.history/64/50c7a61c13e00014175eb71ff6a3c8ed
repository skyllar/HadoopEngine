package com.hdfs;

import java.io.File;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import java.util.TimerTask;

import com.hdfs.HDFS.BlockReportRequest;
import com.hdfs.HDFS.DataNodeLocation;
import com.hdfs.HDFS.HeartBeatRequest;
import com.hdfs.HDFS.HeartBeatResponse;
import com.hdfs.MapReduce.MapTaskInfo;
import com.hdfs.MapReduce.MapTaskStatus;
import com.hdfs.MapReduce.ReduceTaskStatus;
import com.hdfs.MapReduce.ReducerTaskInfo;

public class RepeatTask extends TimerTask {

	DataNodeConfiguration dNCnf;
	INameNode nameNodeStub;
	IJobTracker jobTracker;

	ArrayList<MapTaskStatus> mapTasksRunning = new ArrayList<MapTaskStatus>();
	ArrayList<ReduceTaskStatus> reduceTasksRunning = new ArrayList<ReduceTaskStatus>();

	public RepeatTask(DataNodeConfiguration dataNodeConfig) {
		dNCnf = dataNodeConfig;
	}

	@Override
	public void run() {

		setNameNodeStub();
		heartBeatScheduler();
		blockReportScheduler();

		setJobTrackerStub();
		taskTrackerHeartBeat();

	}

	private void setJobTrackerStub() {
		try {
			jobTracker = (IJobTracker) Naming.lookup("rmi://"
					+ dNCnf.jobTrackerIp + ":" + dNCnf.jobTrackerPort + "/"
					+ dNCnf.jobTrackerReference);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private List<Integer> getBlockNumbersList() {

		List<Integer> blocksList = new ArrayList<Integer>();
		String fileName;

		File dir = new File(dNCnf.dataNodeBlocksDirectory);

		for (File file : dir.listFiles()) {
			fileName = file.getName();
			try {
				Integer blockId = Integer.parseInt(fileName);
				blocksList.add(blockId);
			} catch (Exception e) {
				// ignore if not block file
			}

		}
		return blocksList;
	}

	private void setNameNodeStub() {

		try {
			nameNodeStub = (INameNode) Naming.lookup("rmi://"
					+ dNCnf.nameNodeIP + ":" + dNCnf.nameNodePort + "/"
					+ dNCnf.nameNodeReference);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (RemoteException e) {
			e.printStackTrace();
		} catch (NotBoundException e) {
			e.printStackTrace();
		}
	}

	public void heartBeatScheduler() {
		try {
			HeartBeatRequest.Builder heartBeatRequest = HeartBeatRequest
					.newBuilder();

			heartBeatRequest.setId(dNCnf.dataNodeId);

			byte[] returnedMessage = nameNodeStub.heartBeat(heartBeatRequest
					.build().toByteArray());

			if (returnedMessage == null) {
				System.out.println("Message is null..........");
			}
			HeartBeatResponse heartBeatResponse = HeartBeatResponse
					.parseFrom(returnedMessage);

			// System.out.println(heartBeatResponse.getStatus());

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void blockReportScheduler() {

		try {

			List<Integer> blocksList = getBlockNumbersList();

			BlockReportRequest.Builder blockReportRequest = BlockReportRequest
					.newBuilder();

			blockReportRequest.setId(dNCnf.dataNodeId);
			blockReportRequest.addAllBlockNumbers(blocksList);

			DataNodeLocation.Builder dataNodeLocationBuilder = DataNodeLocation
					.newBuilder();

			dataNodeLocationBuilder.setIp(dNCnf.dataNodeIP);

			dataNodeLocationBuilder.setPort(dNCnf.dataNodePort);

			blockReportRequest.setLocation(dataNodeLocationBuilder);

			nameNodeStub.blockReport(blockReportRequest.build().toByteArray());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void taskTrackerHeartBeat() {

		try {
			MapReduce.HeartBeatRequest.Builder heartBeatRequestBuilder = MapReduce.HeartBeatRequest
					.newBuilder();

			heartBeatRequestBuilder.setTaskTrackerId(dNCnf.taskTrackerId);
			heartBeatRequestBuilder.setNumMapSlotsFree(dNCnf.freeMapSlots);
			heartBeatRequestBuilder
					.setNumReduceSlotsFree(dNCnf.freeReduceSlots);

			// MapTaskStatus.Builder mapTaskStatusBuilder = MapTaskStatus
			// .newBuilder();

			heartBeatRequestBuilder.addAllMapStatus(mapTasksRunning);
			heartBeatRequestBuilder.addAllReduceStatus(reduceTasksRunning);

			byte[] returnedMessage = jobTracker
					.heartBeat(heartBeatRequestBuilder.build().toByteArray());
			System.out.println("Now TaskTracker Heart Beat Calling....");

			MapReduce.HeartBeatResponse heartBeatResponse = MapReduce.HeartBeatResponse
					.parseFrom(returnedMessage);
			taskTrackerHelper(heartBeatResponse);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void taskTrackerHelper(MapReduce.HeartBeatResponse heartBeatResponse) {
		System.out.println("Now Response Recieved from JT as Follows...");
		System.out.println("Map Tasks Retrieved Are as Follows..........: ");
		for (MapTaskInfo mapTasks : heartBeatResponse.getMapTasksList()) {
			ArrayList<Integer> blocksList = (ArrayList<Integer>) mapTasks
					.getInputBlocksList();
			String mapName = mapTasks.getMapName();
			Integer taskId = mapTasks.getTaskId();
			Integer jobId = mapTasks.getJobId();

			System.out.println("Blocks To Be Sent to Mapper: " + blocksList);
			System.out.println("Map Name: " + mapName);
			System.out.println("taskId :" + taskId);
			System.out.println("jobId : " + jobId);
		}

		System.out.println("Reduce Tasks Retrieved Are as Follows.........: ");
		for (ReducerTaskInfo reduceTasks : heartBeatResponse
				.getReduceTasksList()) {

			String outputFile = reduceTasks.getOutputFile();

			ArrayList<String> mapOutputFilesList = (ArrayList<String>) reduceTasks
					.getMapOutputFilesList();

			String reducerName = reduceTasks.getReducerName();
			Integer taskId = reduceTasks.getTaskId();
			Integer jobId = reduceTasks.getJobId();

			// System.out.println("");
			System.out.println("MapOutputFiles To Be Sent to Reducer: "
					+ mapOutputFilesList);
			System.out.println("Reducer Name: " + reducerName);
			System.out.println("taskId :" + taskId);
			System.out.println("jobId : " + jobId);
		}
	}
}
